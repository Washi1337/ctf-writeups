// <Module>
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

public class MainModule
{
	public static object UnusedObj_0;

	public static object object_1;

	public static object object_2;

	public static object UnusedObj_3;

	public static object Unused;

	public static object object_5;

	public static object object_6;

	public static int int_0;

	public static int UnusedInt_1;

	public static int int_2;

	public static int UnusedInt3;

	public static int UnusedInt4;

	public static int Unused_5;

	public static int int_6;

	public static int Unused_7;

	public static int UnusedInt_8;

	public unsafe static VMType1 GetOrCreateGClass2()
	{
		if (VMType1.vmType1Instance != null)
		{
			return VMType1.vmType1Instance;
		}

		object obj = VMType1.LockObject;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*) (&lockTaken));
			if (VMType1.vmType1Instance == null)
			{
				VMType1.vmType1Instance = new VMType1();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}

		return VMType1.vmType1Instance;
	}

	public static bool StartMainVMLoop(VMType1 object_7)
	{
		return MainVMLoop(object_7.vmCpuWrapper);
	}

	public static void ImportMemory2(VMType1 object_7, int int_9)
	{
		object obj =
			"@128\r\n00000000000000000000000000000000\r\n00000000000000000000000001000100\r\n00000000000000000000000001101001\r\n@0\r\n00000011000000000000000100000000\r\n00011001000100000101100101010111\r\n00000001000100000000000100010000\r\n00000001001101100101100101011100\r\n00000011000100000101100101010111\r\n00101100000100000011011100010000\r\n01011001010110010101011101011100\r\n00000001000101010000001000110110\r\n01010111101101100000001000010101\r\n00000010000100000101100101011001\r\n01011111010111110000001100110110\r\n00010101000001010000000110000100\r\n01011111000010100001000000000001\r\n00000010000101010101100101011111\r\n10000100000000010000000010111001\r\n00000011000101010111000000000011\r\n00000000000000001010011101100101\r\n00000000000000000000001100000000\r\n00000001000101010000000100010101\r\n00010101010110010101100101010111\r\n01011111010111110101111100000001\r\n01100101010111110101100101010111\r\n00010101011001010000001000010101\r\n00000010000101010110010100000001\r\n01100101100010000001000001100101\r\n00000010000000001011100101010111\r\n00000000000000110000000010101101\r\n00010101000000010001010100000000\r\n01100101000000010001000000000010\r\n01100101010110000001000001100101\r\n00000000000000000000000010101101";
		ImportMemory2(object_7.object_2, ((string) obj).Replace("\r", "").Split('\n'));
	}

	public static void ImportMemory(VMType1 object_7, int int_9)
	{
		object obj =
			"000000110000000000000000000000001001\r\n010111100000000000000000000000001001\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000100001101010000001000010001\r\n000001000000001101010000001000000001\r\n000001001000001101010000001000010001\r\n000000110000000000000000000000001001\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000010001000001101010000010010000100\r\n000010010000001101010000001000010001\r\n000000110000000101000010000101000010\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000010110000000101001000000000000101\r\n000010111000001111000000000010100011\r\n000011000000001101010000010010000100\r\n000011001000001101010000001001010001\r\n000000110000000101000010000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000100001000001101010000001000010001\r\n000100010000100101001000000000000011\r\n000100011000000111001000000000000011\r\n000010111000001111000000000010100110\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000110111000000101001000000000000101\r\n000111000000001111000000000010000011\r\n000111001000000101000000000101000111\r\n000111010000001101100000010010100100\r\n000111011000001101010000001000010001\r\n000000110000000101000010000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n001011000000001101010000010010000100\r\n000000110000000101000000000101000111\r\n001011010000001101100000010010100100\r\n001011011000000000000000000000001001\r\n000000110000000101000010000000000000\r\n001011101000001101100000010010100100\r\n001011110000000101001000000000000111\r\n000000110000001111110010000101000000\r\n001100000000001101100000000010100100\r\n001100001000000101000000000010000100\r\n001100010000000101001000000001000000\r\n001100011000000101000000000100000111\r\n001100100000001101100000000011000100\r\n000000110000000110000010000000001001\r\n001100110000001101100000010010100100\r\n001100111000000101001000000000000111\r\n000000110000001111000010000101000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n001111111000001101100000010010100100\r\n010000000000000101001000000000000111\r\n000000110000000011000010000101000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n010000101000000101001000000000000101\r\n010000110000001111000000000010100011\r\n010000111000001101010000001000010001\r\n010001000000000101001000000000000000\r\n010001001000001101010000001000010001\r\n000000110000001111000000000101000010\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n010011010000001101100000010010100100\r\n010011011000000101000100000000000111\r\n010011100000000101000010000000000000\r\n000000111001000101000000000000001000\r\n010011110000001101100000010010100100\r\n010011111000000101000100000000000111\r\n010100000000000101000010000000000000\r\n000000111010000101000000000000001000\r\n010100010000001101100000010010100100\r\n010100011000001101100000010010000100\r\n010100100000000101001000000000100000\r\n010100101000000101000100000000000111\r\n010100110000000101000010000000000000\r\n000000111001001111110000000000001000\r\n010101000000001101100100000000000001\r\n010101001000001101010000001000010001\r\n010101010000100101001000000000000010\r\n010101011000000111001000000000000011\r\n010101100000001111000000001000011000\r\n000000110000000000000000000000001001\r\n010101110000000101000000010010100101\r\n010101111000000000000000000000001001\r\n010110000000000101000000100010100000\r\n010110001000001101010000000010000101\r\n010110010000000101000000001000110000\r\n010110011000000101000000000010000100\r\n010110100000000101000000100000000000\r\n010110101000000101000000000101000111\r\n000000110001001101100000000000000001\r\n010110111000001101100000010010100100\r\n010111000000000101001000000000000111\r\n000000110000000111000010000101000000\r\n010111010000001101010000001000010001\r\n010111011000100101001000000000000011\r\n010111100000000111001000000000000011\r\n010111101000001111000000000010100110\r\n010111110000001101010100000000000001\r\n010111111000000101000000001000010000\r\n011000000000001101010000001000010001\r\n011000001000100101001000000000000011\r\n011000010000000111001000000000000011\r\n011000011000001101010000001000010001\r\n011000100000001111110010000000000100\r\n011000101000001101010010000010000111\r\n011000110000001101010000001000010001\r\n011000111000100101001000000000000011\r\n011001000000000111001000000000000011\r\n011001001000001111010000000101000100\r\n011001010000000101000000010010000000\r\n011001011000000101000000000101001000\r\n011001100000001101010000010010000100\r\n011001101000000101000000000101000101\r\n011001110000001101010000001000010001\r\n000000110000000101000000100000000111\r\n100000000100001101010000001000010001\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n100000110000000000000000000000001001\r\n010101000000001101100100000000010001\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n100010110000001101010000001000010001\r\n100010111000100101001000000000000011\r\n100011000000000111001000000000000011\r\n000010111000001111000000000010100101\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n100110111000001101010000001000010001\r\n100111000000100101001000000000000011\r\n100111001000000111001000000000000011\r\n000111000000001111000000000010000101\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000\r\n000000000000000000000000000000000000";
		ImportMemory(object_7.object_2, ((string) obj).Split(new char[1]
		{
			'\n'
		}));
	}

	public static List<GClass4> smethod_4(object object_7)
	{
		return ((VMType1) object_7).list_1;
	}

	public static List<GClass3> smethod_5(object object_7)
	{
		return ((VMType1) object_7).list_0;
	}

	public static GClass21 smethod_6(object object_7)
	{
		return smethod_87(((VMType1) object_7).object_2);
	}

	public static void smethod_7(object object_7)
	{
		smethod_91(((VMType1) object_7).object_2);
	}

	public static void smethod_8(object object_7, int int_9)
	{
		smethod_192(((VMType1) object_7).vmCpuWrapper, int_9);
	}

	public static void smethod_9(object object_7)
	{
		smethod_193(((VMType1) object_7).vmCpuWrapper);
	}

	public static int smethod_10(object object_7)
	{
		return ((GClass3) object_7).int_0;
	}

	public static void smethod_11(object object_7, int int_9)
	{
		((GClass3) object_7).int_0 = int_9;
	}

	public static string smethod_12(object object_7)
	{
		return ((GClass3) object_7).string_0;
	}

	public static void smethod_13(object object_7, object object_8)
	{
		((GClass3) object_7).string_0 = (string) object_8;
	}

	public static string[] smethod_14(object object_7)
	{
		return ((GClass3) object_7).string_1;
	}

	public static void smethod_15(object object_7, object object_8)
	{
		((GClass3) object_7).string_1 = (string[]) object_8;
	}

	public static int smethod_16(object object_7)
	{
		return ((GClass4) object_7).int_0;
	}

	public static void smethod_17(object object_7, int int_9)
	{
		((GClass4) object_7).int_0 = int_9;
	}

	public static string smethod_18(object object_7)
	{
		return ((GClass4) object_7).string_0;
	}

	public static void smethod_19(object object_7, object object_8)
	{
		((GClass4) object_7).string_0 = (string) object_8;
	}

	public static string[] smethod_20(object object_7)
	{
		return ((GClass4) object_7).string_1;
	}

	public static void smethod_21(object object_7, object object_8)
	{
		((GClass4) object_7).string_1 = (string[]) object_8;
	}

	public static string Get_Bits_14_19(ALU object_7)
	{
		return ((ALU) object_7).Bits_14_19;
	}

	public static void Set_Bits_14_19(ALU object_7, string object_8)
	{
		((ALU) object_7).Bits_14_19 = (string) object_8;
	}

	public static bool GetParityFlag(ALU object_7)
	{
		return ((ALU) object_7).ParityFlag;
	}

	public static void SetParityFlag(ALU object_7, int int_9)
	{
		((ALU) object_7).ParityFlag = (byte) int_9 != 0;;
	}

	public static bool GetZeroFlag(ALU object_7)
	{
		return ((ALU) object_7).ZeroFlag;
	}

	public static void SetZeroFlag(object object_7, int int_9)
	{
		((ALU) object_7).ZeroFlag = (byte) int_9 != 0;
	}

	public static string GetArg1(ALU object_7)
	{
		return ((ALU) object_7).Arg1;
	}

	public static void SetArg1(ALU object_7, string object_8)
	{
		((ALU) object_7).Arg1 = (string) object_8;
	}

	public static string GetArg2(ALU object_7)
	{
		return ((ALU) object_7).Arg2;
	}

	public static void SetArg2(ALU object_7, string object_8)
	{
		object_7.Arg2 = object_8;
	}

	public static string GetResult(ALU object_7)
	{
		return ((ALU) object_7).Result;
	}

	public static void SetResult(ALU object_7, string object_8)
	{
		((ALU) object_7).Result = (string) object_8;
	}

	public unsafe static ALU GetOrCreateALU()
	{
		if (ALU.gclass5_0 != null)
		{
			return ALU.gclass5_0;
		}

		object obj = ALU.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*) (&lockTaken));
			if (ALU.gclass5_0 == null)
			{
				ALU.gclass5_0 = new ALU();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}

		return ALU.gclass5_0;
	}

	public static void DoALUOperation(ALU object_7)
	{
		object_7.object_1 = GetOrCreateGClass19();

		// Decoding of bits 14-19
		char c0 = Get_Bits_14_19(object_7)[0];  // Bit operation selection
		char c1 = Get_Bits_14_19(object_7)[1];  // Bit operation selection
		UnusedObj_0 = null;
		char c2 = Get_Bits_14_19(object_7)[2];  // value1 = value of register "1" or 0000..000
		char c3 = Get_Bits_14_19(object_7)[3];  // value2 = value of loaded register or 0000..000
		char c4 = Get_Bits_14_19(object_7)[4];	// Flip bits of value1 or not.
		char c5 = Get_Bits_14_19(object_7)[5];

		string value1 = c2 == '1' ? GetArg1(object_7) : "00000000000000000000000000000000";
		string A;

		if (c4 == '1')
		{
			UnusedObj_3 = null;
			A = ToBinary(~Convert.ToInt32(value1, 2), 32);
		}
		else
		{
			A = value1;
		}

		string B = c3 == '1' ? GetArg2(object_7) : "00000000000000000000000000000000";
		string value3 = c5.ToString();

		uint additionResult = Convert.ToUInt32(A, 2)
		            + Convert.ToUInt32(B, 2)
		            + Convert.ToUInt32(value3, 2);

		string operation = new string(new char[2]
		{
			c0,
			c1
		});
		GClass3.Unused = "b504268a-c810-4e05-9542-20d694d57377bdb2937e-15fd-4759-8625-049155a65";

		Unused_7 = -942491469;

		string result;
		switch (operation)
		{
			case "00":
			{
				// AND
				int int_ = Convert.ToInt32(A, 2) & Convert.ToInt32(B, 2);
				UnusedInt_8 = 2097519326;
				result = ToBinary(int_, 32);
				break;
			}
			case "01":
				// OR
				result = ToBinary(Convert.ToInt32(A, 2) | Convert.ToInt32(B, 2), 32);
				break;

			//	GClass3.Unused = obj4;

			case "10":
				// NOT
				result = ToBinary(~Convert.ToInt32(B, 2), 32);
				break;

			case "11":
				// Identity?
				result = Convert.ToString(additionResult, 2);
				break;

			default:
				result = "00000000000000000000000000000000";
				break;
		}

		SetResult(object_7, ToBinary(Convert.ToInt32(result, 2), 32));
		SetString1(object_7.object_1, GetResult(object_7));
		SetParityFlag(object_7, GetResult(object_7)[0] == '1' ? 1 : 0);
		SetZeroFlag(object_7, GetResult(object_7) == "00000000000000000000000000000000" ? 1 : 0);
		DoNothing5(object_7);
	}

	public static void DoNothing5(object object_7)
	{
	}

	public static string GetAluOperation(object object_7)
	{
		return ((GClass6) object_7).AluOperation;
	}

	public static void SetAluOperation(object object_7, object object_8)
	{
		((GClass6) object_7).AluOperation = (string) object_8;
	}

	public static string GetAluArg1(object object_7)
	{
		return ((GClass6) object_7).AluArg1;
	}

	public static void SetAluArg1(object object_7, object object_8)
	{
		((GClass6) object_7).AluArg1 = (string) object_8;
	}

	public static string GetAluArg2(object object_7)
	{
		return ((GClass6) object_7).AluArg2;
	}

	public static void SetAluArg2(object object_7, object object_8)
	{
		((GClass6) object_7).AluArg2 = (string) object_8;
	}

	public static string GetAluResult(object object_7)
	{
		return ((GClass6) object_7).AluResult;
	}

	public static void SetAluResult(object object_7, object object_8)
	{
		((GClass6) object_7).AluResult = (string) object_8;
	}

	public static bool GetParityFlag(object object_7)
	{
		return ((GClass6) object_7).ParityFlag;
	}

	public static void SetParityFlag(GClass6 object_7, int int_9)
	{
		((GClass6) object_7).ParityFlag = (byte) int_9 != 0;
	}

	public static bool GetZeroFlag(GClass6 object_7)
	{
		return ((GClass6) object_7).ZeroFlag;
	}

	public static void SetZeroFlag(GClass6 object_7, int int_9)
	{
		((GClass6) object_7).ZeroFlag = (byte) int_9 != 0;
	}

	public unsafe static GClass6 smethod_49()
	{
		if (GClass6.gclass6_0 != null)
		{
			return GClass6.gclass6_0;
		}

		object obj = GClass6.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*) (&lockTaken));
			if (GClass6.gclass6_0 == null)
			{
				GClass6.gclass6_0 = new GClass6();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}

		return GClass6.gclass6_0;
	}

	public static void MoveDataFromALU(GClass6 object_7)
	{
		SetAluOperation(object_7, Get_Bits_14_19(((GClass6) object_7).ALU));
		SetAluArg1(object_7, GetArg1(((GClass6) object_7).ALU));
		SetAluArg2(object_7, GetArg2(((GClass6) object_7).ALU));
		SetAluResult(object_7, GetResult(((GClass6) object_7).ALU));
		SetParityFlag(object_7, GetParityFlag(((GClass6) object_7).ALU) ? 1 : 0);
		SetZeroFlag((GClass6) object_7, GetZeroFlag(((GClass6) object_7).ALU) ? 1 : 0);
	}

	public static string GetString0(MMU object_7)
	{
		return object_7.operation;
	}

	public static void SetString0(MMU object_7, string object_8)
	{
		object_7.operation = object_8;
	}

	public unsafe static MMU smethod_53()
	{
		if (MMU.gclass7_0 != null)
		{
			return MMU.gclass7_0;
		}

		object obj = MMU.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*) (&lockTaken));
			if (MMU.gclass7_0 == null)
			{
				MMU.gclass7_0 = new MMU();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}

		return MMU.gclass7_0;
	}

	public static string[] DoReadWriteMemory(MMU object_7, string reg0, string reg1, string reg2)
	{
		object obj = "";
		object obj2 = "";

		string[] array = new string[2];

		int num = Convert.ToInt32(GetString0(object_7).Substring(0, 1));
		int num2 = Convert.ToInt32(GetString0(object_7).Substring(1, 1));
		int num3 = Convert.ToInt32(GetString0(object_7).Substring(2, 1));

		if (num == 1)
		{
			GClass3.Unused = "0d719fee-ce9d-4bb8-a6ff-d2e882766b6b59";
			WriteDword(object_7.memory, reg1, reg0);
		}

		UnusedInt_1 = num3;
		if (num2 == 1)
		{
			obj = ReadDword(object_7.memory, reg0);
		}

		if (num3 == 1)
		{
			obj2 = ReadByte(object_7.memory, reg2);
		}

		array[0] = (string) obj;
		UnusedObj_0 = null;
		array[1] = (string) obj2;
		return array;
	}

	public static string GetResult(InputRegisterLoader object_7)
	{
		return object_7.Result;
	}

	public static void SetResult(InputRegisterLoader object_7, string object_8)
	{
		object_7.Result = object_8;
	}

	public static string GetBits_32_36(InputRegisterLoader object_7)
	{
		return object_7.Bits_32_36;
	}

	public static void Set_Bits_32_36(InputRegisterLoader object_7, string object_8)
	{
		object_7.Bits_32_36 = object_8;
	}

	public unsafe static InputRegisterLoader smethod_59()
	{
		if (InputRegisterLoader.gclass8_0 != null)
		{
			return InputRegisterLoader.gclass8_0;
		}

		object obj = InputRegisterLoader.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*) (&lockTaken));
			if (InputRegisterLoader.gclass8_0 == null)
			{
				InputRegisterLoader.gclass8_0 = new InputRegisterLoader();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}

		return InputRegisterLoader.gclass8_0;
	}

	public static void MoveLoadedRegisterValueIntoArg2OfALU(InputRegisterLoader object_7)
	{
		object_7.ALU = GetOrCreateALU();
		SetArg2(object_7.ALU, GetResult(object_7));
	}

	public static void LoadRegisterValue(InputRegisterLoader object_7)
	{
		object_7.Registers = GetOrCreateRegisters();
		string obj = "000000000";
		uint num = Convert.ToUInt32(GetBits_32_36(object_7), 2);
		uint num2 = num;
		num = 8 - num;
		if (num2 < 9)
		{
			char[] array = obj.ToCharArray();
			array[num] = '1';
			obj = new string(array);
		}

		switch (obj)
		{
			case "000000001":
				SetResultToRegValue(object_7.Registers[1]);
				break;
			case "000000010":
				SetResultToRegValue(object_7.Registers[2]);
				break;
			case "000000100":
			{
				// sign extend reg3
				string object_9 = GetValue(object_7.Registers[3]);
				SignExtend(object_7, object_9);
				SetResultToRegValue(object_7.Registers[3]);
				object_5 = 1342289659;
				SetValue(object_7.Registers[3], (string) object_9);
				break;
			}
			case "000001000":
			{
				// zero extend reg3.
				string object_8 = GetValue(object_7.Registers[3]);
				SetValue(object_7.Registers[3],
					"000000000000000000000000" + GetValue(object_7.Registers[3]).Substring(24, 8));
				SetResultToRegValue(object_7.Registers[3]);
				SetValue(object_7.Registers[3], (string) object_8);
				GClass36.object_0 = 1952428595;
				break;
			}
			case "000010000":
				SetResultToRegValue(object_7.Registers[4]);
				break;
			case "000100000":
				SetResultToRegValue(object_7.Registers[5]);
				break;
			case "001000000":
				SetResultToRegValue(object_7.Registers[6]);
				break;
			case "010000000":
				SetResultToRegValue(object_7.Registers[7]);
				break;
			case "100000000":
				SetResultToRegValue(object_7.Registers[8]);
				break;
			default:
				SetResult(object_7, "00000000000000000000000000000000");
				break;
		}
	}

	public static void SignExtend(InputRegisterLoader object_7, string object_8)
	{
		if (object_8[24] == '1')
		{
			SetValue(object_7.Registers[3], "111111111111111111111111" + GetValue(object_7.Registers[3]).Substring(24, 8));
		}
		else
		{
			SetValue(object_7.Registers[3], "000000000000000000000000" + GetValue(object_7.Registers[3]).Substring(24, 8));
		}
	}

	public static string smethod_63(object object_7)
	{
		return ((GClass10)object_7).string_0;
	}

	public static void smethod_64(object object_7, object object_8)
	{
		((GClass10)object_7).string_0 = (string)object_8;
	}

	public static string smethod_65(object object_7)
	{
		return ((GClass10)object_7).string_1;
	}

	public static void smethod_66(object object_7, object object_8)
	{
		((GClass10)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass10 smethod_67()
	{
		if (GClass10.gclass10_0 != null)
		{
			return GClass10.gclass10_0;
		}
		object obj = GClass10.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass10.gclass10_0 == null)
			{
				GClass10.gclass10_0 = new GClass10();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass10.gclass10_0;
	}

	public static void smethod_68(object object_7)
	{
		smethod_64(object_7, GetBits_32_36((InputRegisterLoader) ((GClass10)object_7).object_1));
		smethod_66(object_7, GetResult(((GClass10)object_7).object_1));
	}

	public static string GetString0(GClass11 object_7)
	{
		return object_7.string_0;
	}

	public static void SetString0(GClass11 object_7, string object_8)
	{
		object_7.string_0 = object_8;
	}

	public static string GetString1(GClass11 object_7)
	{
		return object_7.string_1;
	}

	public static void SetString1(GClass11 object_7, string object_8)
	{
		object_7.string_1 = object_8;
	}

	public unsafe static GClass11 GetOrCreateGClass11()
	{
		if (GClass11.gclass11_0 != null)
		{
			return GClass11.gclass11_0;
		}
		object obj = GClass11.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass11.gclass11_0 == null)
			{
				GClass11.gclass11_0 = new GClass11();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass11.gclass11_0;
	}

	public static void MoveResultIntoRegisters(GClass11 object_7)
	{
		Unused = "e1ee8de6-7ea8-41d8-8ec8-513c47afb05cb77808d0-33ea-42b1-9708-91d7b6a529217c365957-e2af-4819-";
		if (GetString0(object_7)[8] == '1')
		{
			SetValue(object_7.Registers[0], GetString1(object_7));
		}
		if (GetString0(object_7)[7] == '1')
		{
			SetValue(object_7.Registers[1], GetString1(object_7));
		}
		if (GetString0(object_7)[6] == '1')
		{
			SetValue(object_7.Registers[2], GetString1(object_7));
		}
		if (GetString0(object_7)[5] == '1')
		{
			SetValue(object_7.Registers[4], GetString1(object_7));
		}
		if (GetString0(object_7)[4] == '1')
		{
			SetValue(object_7.Registers[5], GetString1(object_7));
		}
		if (GetString0(object_7)[3] == '1')
		{
			SetValue(object_7.Registers[6], GetString1(object_7));
		}
		if (GetString0(object_7)[2] == '1')
		{
			SetValue(object_7.Registers[7], GetString1(object_7));
		}
		if (GetString0(object_7)[1] == '1')
		{
			SetValue(object_7.Registers[8], GetString1(object_7));
		}
		char num = GetString0(object_7)[0];
		int_2 = 1987339265;
		if (num == '1')
		{
			SetValue(object_7.Registers[9], GetString1(object_7));
		}
	}

	public static string smethod_75(object object_7)
	{
		return ((GClass12)object_7).string_0;
	}

	public static void smethod_76(object object_7, object object_8)
	{
		((GClass12)object_7).string_0 = (string)object_8;
	}

	public static string smethod_77(object object_7)
	{
		return ((GClass12)object_7).string_1;
	}

	public static void smethod_78(object object_7, object object_8)
	{
		((GClass12)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass12 smethod_79()
	{
		if (GClass12.gclass12_0 != null)
		{
			return GClass12.gclass12_0;
		}
		object obj = GClass12.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass12.gclass12_0 == null)
			{
				GClass12.gclass12_0 = new GClass12();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass12.gclass12_0;
	}

	public static void smethod_80(object object_7)
	{
		smethod_76(object_7, GetString0((GClass11) ((GClass12)object_7).object_1));
		smethod_78(object_7, GetString1((GClass11) ((GClass12)object_7).object_1));
	}

	public unsafe static VMState GetOrCreateClass13()
	{
		if (VMState.gclass13_0 != null)
		{
			return VMState.gclass13_0;
		}
		object obj = VMState.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMState.gclass13_0 == null)
			{
				VMState.gclass13_0 = new VMState();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMState.gclass13_0;
	}

	public static void smethod_82(VMState object_7)
	{
		smethod_169(object_7.InternalState1);
	}

	public static string FetchInstruction(VMState object_7, string address)
	{
		return FetchInstruction(object_7.Memory1, address);
	}

	public static bool WrapExecuteInstruction(VMState object_7, string object_8)
	{
		ExecuteInstruction(object_7.InternalState1, object_8);
		return true;
	}

	public static void ImportMemory2(object object_7, string[] object_8)
	{
		InitializeMemory2(((VMState)object_7).memory2, object_8);
	}

	public static void ImportMemory(VMState dest, object data)
	{
		ImportMemory(dest.Memory1, (string[])data);
	}

	public static GClass21 smethod_87(object object_7)
	{
		return (GClass21)((VMState)object_7).object_4;
	}

	public static void CopyOverStuff(VMState object_7)
	{
		smethod_165(object_7.object_4);
	}

	public static string GetRegister3Value(VMState object_7)
	{
		return GetRegister3Value(((VMState)object_7).InternalState1);
	}

	public static int[] GetFlags(VMState object_7)
	{
		return GetFlags(((VMState)object_7).InternalState1);
	}

	public static void smethod_91(object object_7)
	{
		SetBool0(((VMState)object_7).object_4, (byte) 0);
	}

	public static string[] GetArray(VMMemory2 object_7)
	{
		return object_7.MemoryContents;
	}

	public static void SetArray(object object_7, object object_8)
	{
		((VMMemory2)object_7).MemoryContents = (string[])object_8;
	}

	public unsafe static VMMemory2 GetOrCreateMemory2()
	{
		if (VMMemory2.gclass14_0 != null)
		{
			return VMMemory2.gclass14_0;
		}
		object obj = VMMemory2.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMMemory2.gclass14_0 == null)
			{
				VMMemory2.gclass14_0 = new VMMemory2();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMMemory2.gclass14_0;
	}

	public static string ReadDword(VMMemory2 object_7, string address)
	{
		return GetArray(object_7)[Convert.ToUInt32(address, 2)];
	}

	public static void WriteDword(VMMemory2 object_7, string value, string address)
	{
		GetArray(object_7)[Convert.ToUInt32(address, 2)] = value;
	}

	public static string ReadByte(VMMemory2 object_7, string address)
	{
		string addr = "00" + address.Substring(0, 30);
		UnusedObj_3 = 1386028750;
		uint actualAddr = Convert.ToUInt32(addr, 2);

		string rawMemoryValue = GetArray(object_7)[actualAddr];

		string result;
		switch (address.Substring(30, 2))
		{
		default:
			result = "00000000";
			break;
		case "11":
			int_2 = 480802764;
			result = rawMemoryValue.Substring(0, 8);
			break;
		case "10":
			result = rawMemoryValue.Substring(8, 8);
			break;
		case "01":
			result = rawMemoryValue.Substring(16, 8);
			break;
		case "00":
			UnusedInt_8 = (int)actualAddr;
			result = rawMemoryValue.Substring(24, 8);
			break;
		}
		object obj3 = result;
		UnusedInt_1 = -1040838703;
		UnusedInt_8 = -1051365525;
		return "000000000000000000000000" + (string)obj3;
	}

	public static void InitializeMemory2(VMMemory2 object_7, string[] object_8)
	{
		int num = 0;

		// set all to zero.
		for (int i = 0; i < 512; i++)
		{
			UnusedInt3 = -1592258590;
			GetArray(object_7)[i] = "00000000000000000000000000000000";
		}

		// Find end of function table.
		for (int j = 0; j < object_8.Length; j++)
		{
			if (object_8[j].Contains("@0"))
			{
				num = j;
				break;
			}
		}

		int num2 = default(int);
		GClass1.int_0 = num2;

		// Write function table to index 0x80
		for (num2 = 1; num2 < num; num2++)
		{
			string[] array = GetArray(object_7);
			object_1 = null;
			array[128 + num2 - 1] = object_8[num2];
		}

		// Write bytecode at index 0.
		int k;
		for (k = 0; k < object_8.Length - num - 1; k++)
		{
			GetArray(object_7)[k] = object_8[k + 1 + num];
		}
		object_5 = k;
	}

	public static string[] smethod_99(object object_7)
	{
		return ((VMMemory2Copy)object_7).Array;
	}

	public static void SetArray(VMMemory2Copy object_7, string[] object_8)
	{
		((VMMemory2Copy)object_7).Array = (string[])object_8;
	}

	public unsafe static VMMemory2Copy smethod_101()
	{
		if (VMMemory2Copy.gclass15_0 != null)
		{
			return VMMemory2Copy.gclass15_0;
		}
		object obj = VMMemory2Copy.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMMemory2Copy.gclass15_0 == null)
			{
				VMMemory2Copy.gclass15_0 = new VMMemory2Copy();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMMemory2Copy.gclass15_0;
	}

	public static void SetMemory2Copy(object object_7)
	{
		SetArray((VMMemory2Copy) object_7, GetArray(((VMMemory2Copy)object_7).object_1));
	}

	public static string[] GetArray(VMMemory object_7)
	{
		return object_7.Array;
	}

	public static void SetArray(VMMemory object_7, string[] object_8)
	{
		object_7.Array = object_8;
	}

	public unsafe static VMMemory GetOrCreateVMMemory()
	{
		if (VMMemory.Instance != null)
		{
			return VMMemory.Instance;
		}
		object obj = VMMemory.LockObject;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMMemory.Instance == null)
			{
				VMMemory.Instance = new VMMemory();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMMemory.Instance;
	}

	public static void ImportMemory(VMMemory dest, string[] data)
	{
		for (int i = 0; i < 511; i++)
		{
			GetArray(dest)[i] = data[i];
		}
	}

	public static string FetchInstruction(VMMemory object_7, string address)
	{
		uint num = Convert.ToUInt32(address, 2);
		return GetArray(object_7)[num];
	}

	public static string[] smethod_108(object object_7)
	{
		return ((VMMemory1Copy)object_7).MemoryContents;
	}

	public static void SetContents(VMMemory1Copy object_7, string[] object_8)
	{
		object_7.MemoryContents = object_8;
	}

	public unsafe static VMMemory1Copy GetOrCreateVMMemory1Copy()
	{
		if (VMMemory1Copy.gclass17_0 != null)
		{
			return VMMemory1Copy.gclass17_0;
		}
		object obj = VMMemory1Copy.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMMemory1Copy.gclass17_0 == null)
			{
				VMMemory1Copy.gclass17_0 = new VMMemory1Copy();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMMemory1Copy.gclass17_0;
	}

	public static void SetMemory1Copy(VMMemory1Copy object_7)
	{
		SetContents(object_7, GetArray(object_7.Memory));
	}

	public static string GetRegister0Value(object object_7)
	{
		return ((GClass18)object_7).Register0Value;
	}

	public static void SetRegister0Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register0Value = (string)object_8;
	}

	public static string GetRegister1Value(object object_7)
	{
		return ((GClass18)object_7).Register1Value;
	}

	public static void SetRegister1Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register1Value = (string)object_8;
	}

	public static string GetRegister2Value(object object_7)
	{
		return ((GClass18)object_7).Register2Value;
	}

	public static void SetRegister2Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register2Value = (string)object_8;
	}

	public static string GetRegister3Value(object object_7)
	{
		return ((GClass18)object_7).Register3Value;
	}

	public static void SetRegister3Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register3Value = (string)object_8;
	}

	public static string GetRegister4Value(object object_7)
	{
		return ((GClass18)object_7).Register4Value;
	}

	public static void SetRegister4Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register4Value = (string)object_8;
	}

	public static string GetRegister5Value(object object_7)
	{
		return ((GClass18)object_7).Register5Value;
	}

	public static void SetRegister5Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register5Value = (string)object_8;
	}

	public static string GetRegister6Value(object object_7)
	{
		return ((GClass18)object_7).Register6Value;
	}

	public static void SetRegister6Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register6Value = (string)object_8;
	}

	public static string GetRegister7Value(object object_7)
	{
		return ((GClass18)object_7).Register7Value;
	}

	public static void SetRegister7Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register7Value = (string)object_8;
	}

	public static string GetRegister8Value(object object_7)
	{
		return ((GClass18)object_7).Register8Value;
	}

	public static void SetRegister8Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register8Value = (string)object_8;
	}

	public static string GetRegister9Value(object object_7)
	{
		return ((GClass18)object_7).Register9Value;
	}

	public static void SetRegister9Value(object object_7, object object_8)
	{
		((GClass18)object_7).Register9Value = (string)object_8;
	}

	public unsafe static GClass18 smethod_132()
	{
		if (GClass18.gclass18_0 != null)
		{
			return GClass18.gclass18_0;
		}
		object obj = GClass18.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass18.gclass18_0 == null)
			{
				GClass18.gclass18_0 = new GClass18();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass18.gclass18_0;
	}

	public static void ImportRegisterValues(object object_7)
	{
		SetRegister0Value(object_7, GetValue(((GClass18)object_7).Registers[0]));
		SetRegister1Value(object_7, GetValue(((GClass18)object_7).Registers[1]));
		SetRegister2Value(object_7, GetValue(((GClass18)object_7).Registers[2]));
		SetRegister3Value(object_7, GetValue(((GClass18)object_7).Registers[3]));
		SetRegister4Value(object_7, GetValue(((GClass18)object_7).Registers[4]));
		SetRegister5Value(object_7, GetValue(((GClass18)object_7).Registers[5]));
		SetRegister6Value(object_7, GetValue(((GClass18)object_7).Registers[6]));
		string object_8 = GetValue(((GClass18)object_7).Registers[7]);
		GClass36.object_0 = null;
		SetRegister7Value(object_7, object_8);
		SetRegister8Value(object_7, GetValue(((GClass18)object_7).Registers[8]));
		string object_9 = GetValue(((GClass18)object_7).Registers[9]);
		GClass1.int_0 = -1020138379;
		SetRegister9Value(object_7, object_9);
	}

	public static string GetValue(Register object_7)
	{
		return object_7.Value;
	}

	public static void SetValue(Register object_7, string object_8)
	{
		object_7.Value = object_8;
	}

	public static string GetName(Register object_7)
	{
		return object_7.Name;
	}

	public static void SetName(Register object_7, string object_8)
	{
		object_7.Name = object_8;
	}

	public static void IfRegisterIs1ThenSetArg1ToRegister(Register object_7)
	{
		if (GetName(object_7) == "1")
		{
			SetArg1(object_7.object_1, GetValue(object_7));
		}
	}

	public static void SetResultToRegValue(Register object_7)
	{
		SetResult(object_7.object_2, GetValue(object_7));
	}

	public unsafe static Register[] GetOrCreateRegisters()
	{
		if (Register.Registers != null)
		{
			return Register.Registers;
		}
		object obj = Register.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (Register.Registers != null)
			{
				Unused_7 = -805702749;
				return Register.Registers;
			}
			Register.Registers = new Register[10];
			// Register.Registers[0] = new Register("123", "00000000000000000000000000000000");
			// Register.Registers[1] = new Register("123", "00000000000000000000000000000000");
			// Register.Registers[2] = new Register("12", "00000000000000000000000000000000");
			// Register.Registers[3] = new Register("123", "00000000000000000000000000000000");
			// Register.Registers[4] = new Register("12", "00000000000000000000000000000000");
			// Register.Registers[5] = new Register("12", "00000000000000000000000000000000");
			// Register.Registers[6] = new Register("123", "00000000000000000000000000000000");
			// Register.Registers[7] = new Register("123", "00000000000000000000000000000000");
			// Register.Registers[8] = new Register("O12", "00000000000000000000000000000000");
			// Register.Registers[9] = new Register("1", "00000000000000000000000000000000");
			Register.Registers[0] = new Register("REG_0", "00000000000000000000000000000000");
			Register.Registers[1] = new Register("REG_1", "00000000000000000000000000000000");
			Register.Registers[2] = new Register("REG_2", "00000000000000000000000000000000");
			Register.Registers[3] = new Register("REG_3", "00000000000000000000000000000000");
			Register.Registers[4] = new Register("REG_4", "00000000000000000000000000000000");
			Register.Registers[5] = new Register("REG_5", "00000000000000000000000000000000");
			Register.Registers[6] = new Register("REG_6", "00000000000000000000000000000000");
			Register.Registers[7] = new Register("REG_7", "00000000000000000000000000000000");
			Register.Registers[8] = new Register("REG_8", "00000000000000000000000000000000");
			Register.Registers[9] = new Register("1", "00000000000000000000000000000000");
		}
		finally
		{
			int num = lockTaken;
			int_0 = 1258415768;
			if (num != 0)
			{
				object_6 = null;
				Monitor.Exit(obj);
			}
		}
		return Register.Registers;
	}

	public static string GetString0(ShiftRotateUnit object_7)
	{
		return object_7.string_0;
	}

	public static void SetString0(ShiftRotateUnit object_7, string object_8)
	{
		object_7.string_0 = object_8;
	}

	public static string GetString1(ShiftRotateUnit object_7)
	{
		return object_7.string_1;
	}

	public static void SetString1(ShiftRotateUnit object_7, object object_8)
	{
		object_7.string_1 = (string)object_8;
	}

	public unsafe static ShiftRotateUnit GetOrCreateGClass19()
	{
		if (ShiftRotateUnit.gclass19_0 != null)
		{
			return ShiftRotateUnit.gclass19_0;
		}
		object obj = ShiftRotateUnit.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (ShiftRotateUnit.gclass19_0 == null)
			{
				ShiftRotateUnit.gclass19_0 = new ShiftRotateUnit();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return ShiftRotateUnit.gclass19_0;
	}

	public static string ShiftLeftBy8(ShiftRotateUnit object_7)
	{
		return GetString1(object_7).Substring(8, 24) + "00000000";
	}

	public static string RotateRight(ShiftRotateUnit object_7)
	{
		return GetString1(object_7)[0] + GetString1(object_7).Substring(0, 31);
	}

	public static void DoShiftOrRotate(ShiftRotateUnit object_7)
	{
		string obj = GetString0(object_7);

		string result = obj switch
		{
			"10" => ShiftLeftBy8(object_7),
			"01" => RotateRight(object_7),
			_ => GetString1(object_7)
		};

		SetString1(object_7, result);

		object_7.ResultLine = GetOrCreateGClass11();
		SetString1(object_7.ResultLine, GetString1(object_7));

		DoNothing6(object_7);
	}

	public static void DoNothing6(object object_7)
	{
	}

	public static string smethod_150(object object_7)
	{
		return ((GClass20)object_7).string_0;
	}

	public static void smethod_151(object object_7, object object_8)
	{
		((GClass20)object_7).string_0 = (string)object_8;
	}

	public static string smethod_152(object object_7)
	{
		return ((GClass20)object_7).string_1;
	}

	public static void smethod_153(object object_7, object object_8)
	{
		((GClass20)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass20 smethod_154()
	{
		if (GClass20.gclass20_0 != null)
		{
			return GClass20.gclass20_0;
		}
		object obj = GClass20.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass20.gclass20_0 == null)
			{
				GClass20.gclass20_0 = new GClass20();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass20.gclass20_0;
	}

	public static void smethod_155(object object_7)
	{
		smethod_151(object_7, GetString1(((GClass20)object_7).object_1));
		smethod_153(object_7, GetString0(((GClass20)object_7).object_1));
	}

	public static bool smethod_156(object object_7)
	{
		return ((GClass21)object_7).bool_0;
	}

	public static void SetBool0(GClass21 object_7, byte int_9)
	{
		object_7.bool_0 = int_9 != 0;
	}

	public static VMMemory1Copy GetMemory(object object_7)
	{
		return (VMMemory1Copy)((GClass21)object_7).vmMemory1Copy;
	}

	public static void smethod_159(object object_7, VMMemory1Copy object_8)
	{
		((GClass21)object_7).vmMemory1Copy = object_8;
	}

	public static VMMemory2Copy GetMemory2(object object_7)
	{
		return ((GClass21)object_7).vmMemory2Copy;
	}

	public static void smethod_161(object object_7, VMMemory2Copy object_8)
	{
		((GClass21)object_7).vmMemory2Copy = object_8;
	}

	public static GClass23 smethod_162(object object_7)
	{
		return ((GClass21)object_7).object_3;
	}

	public static void smethod_163(object object_7, GClass23 object_8)
	{
		((GClass21)object_7).object_3 = object_8;
	}

	public unsafe static GClass21 smethod_164()
	{
		if (GClass21.gclass21_0 != null)
		{
			return GClass21.gclass21_0;
		}
		object obj = GClass21.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass21.gclass21_0 == null)
			{
				GClass21.gclass21_0 = new GClass21();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass21.gclass21_0;
	}

	public static void smethod_165(GClass21 object_7)
	{
		SetMemory1Copy(GetMemory(object_7));
		SetMemory2Copy(GetMemory2(object_7));
		smethod_188(smethod_162(object_7));
		SetBool0(object_7, (byte) 1);
	}

	public static string smethod_166(object object_7)
	{
		return ((VMInternalState1)object_7).CurrentInstruction;
	}

	public static void SetCurrentInstruction(VMInternalState1 object_7, string object_8)
	{
		object_7.CurrentInstruction = object_8;
	}

	public unsafe static VMInternalState1 GetOrCreateInternalState1()
	{
		if (VMInternalState1.gclass22_0 != null)
		{
			return VMInternalState1.gclass22_0;
		}
		object obj = VMInternalState1.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMInternalState1.gclass22_0 == null)
			{
				VMInternalState1.gclass22_0 = new VMInternalState1();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMInternalState1.gclass22_0;
	}

	public static void smethod_169(object object_7)
	{
		SetValue(((VMInternalState1)object_7).Registers[4], ToBinary(257, 32));
		SetValue(((VMInternalState1)object_7).Registers[5], ToBinary(256, 32));
		object_2 = null;
		Register object_8 = ((VMInternalState1)object_7).Registers[6];
		string object_9 = ToBinary(128, 32);
		GClass3.Unused = "9e194d99-ee09-4fb0-a223-01959babc74f49490fd5-c163-4886-94a1-11e87b7f295fd929ca62-1ba0-";
		object_6 = null;
		SetValue(object_8, object_9);
		SetValue(((VMInternalState1)object_7).Registers[7], ToBinary(0, 32));
		SetValue(((VMInternalState1)object_7).Registers[8], ToBinary(0, 32));
		SetValue(((VMInternalState1)object_7).Registers[9], ToBinary(0, 32));
		int_2 = 1598461138;
		SetValue(((VMInternalState1)object_7).Registers[0], ToBinary(0, 32));
		Register object_10 = ((VMInternalState1)object_7).Registers[1];
		string object_11 = ToBinary(0, 32);
		Unused_5 = -1932913121;
		SetValue(object_10, object_11);
		Register[] gclass9_ = ((VMInternalState1)object_7).Registers;
		UnusedObj_0 = -1130534674;
		Register object_12 = gclass9_[2];
		string object_13 = ToBinary(0, 32);
		object_6 = null;
		SetValue(object_12, object_13);
		SetValue(((VMInternalState1)object_7).Registers[3], ToBinary(0, 32));
		((VMInternalState1)object_7).MemoryReadResultIsSet = false;
		UnusedInt4 = 2071185029;
		((VMInternalState1)object_7).LastReadWriteOperation = "000";
		VMInternalState1.int_0 = 0;
		VMInternalState1.int_1 = 0;
		VMInternalState1.int_2 = 0;
	}

	public static void ExecuteInstruction(VMInternalState1 vm, string instruction)
	{
		SetCurrentInstruction(vm, instruction);

		// Decode
		string bits_32_36 = instruction.Substring(32, 4);  // Input register select
		string bits_29_31 = instruction.Substring(29, 3);  // Memory operation selection.
		string bits_20_28 = instruction.Substring(20, 9);  // Destination register selection.
		string bits_14_19 = instruction.Substring(14, 6);  // ALU operation selection.
		string bits_12_14 = instruction.Substring(12, 2);  // Shift / Rotate operation selection

		DoNothing4(vm);

		Set_Bits_32_36(vm.RegisterContainer, bits_32_36);
		LoadRegisterValue(vm.RegisterContainer);

		MoveLoadedRegisterValueIntoArg2OfALU(vm.RegisterContainer);
		IfRegisterIs1ThenSetArg1ToRegister(vm.Registers[9]);
		Set_Bits_14_19(vm.ALU, bits_14_19);
		DoALUOperation(vm.ALU);

		SetString0(vm.ShiftRotateUnit, bits_12_14);
		DoShiftOrRotate(vm.ShiftRotateUnit);

		SetString0(vm.object_3, bits_20_28);
		MoveResultIntoRegisters(vm.object_3);

		string reg0Value = GetValue(vm.Registers[0]);
		string reg1Value = GetValue(vm.Registers[1]);
		string reg2Value = GetValue(vm.Registers[2]);

		LoadReadMemoryIntoRegisters(vm);
		SetString0(vm.MMU, bits_29_31);
		string[] readOutput = DoReadWriteMemory(vm.MMU, reg0Value, reg1Value, reg2Value);

		Unused = 1818084011;
		vm.MemoryReadResult = readOutput;

		if (bits_29_31 != "000")
		{
			vm.LastReadWriteOperation = bits_29_31;
			vm.MemoryReadResultIsSet = true;
		}
	}

	public static void DoNothing4(object object_7)
	{
	}

	public static void LoadReadMemoryIntoRegisters(VMInternalState1 object_7)
	{
		if (object_7.MemoryReadResultIsSet)
		{
			VMInternalState1.int_0 = Convert.ToInt32(object_7.LastReadWriteOperation.Substring(1, 1));
			VMInternalState1.int_1 = Convert.ToInt32(object_7.LastReadWriteOperation.Substring(2, 1));
			if (VMInternalState1.int_0 == 1)
			{
				SetValue(object_7.Registers[1], object_7.MemoryReadResult[0]);
			}
			if (VMInternalState1.int_1 == 1)
			{
				SetValue(object_7.Registers[3], object_7.MemoryReadResult[1]);
			}
			object_7.MemoryReadResultIsSet = false;
		}
	}

	public static string GetRegister3Value(VMInternalState1 object_7)
	{
		return GetValue(((VMInternalState1)object_7).Registers[3]);
	}

	public static int[] GetFlags(VMInternalState1 object_7)
	{
		return new int[2]
		{
			Convert.ToInt32(GetParityFlag(((VMInternalState1)object_7).ALU)),
			Convert.ToInt32(GetZeroFlag(((VMInternalState1)object_7).ALU))
		};
	}

	public static string smethod_175(object object_7)
	{
		return ((GClass23)object_7).string_0;
	}

	public static void smethod_176(object object_7, object object_8)
	{
		((GClass23)object_7).string_0 = (string)object_8;
	}

	public static GClass20 smethod_177(object object_7)
	{
		return (GClass20)((GClass23)object_7).object_2;
	}

	public static void smethod_178(object object_7, object object_8)
	{
		((GClass23)object_7).object_2 = object_8;
	}

	public static GClass6 smethod_179(object object_7)
	{
		return (GClass6)((GClass23)object_7).object_3;
	}

	public static void smethod_180(object object_7, object object_8)
	{
		((GClass23)object_7).object_3 = object_8;
	}

	public static GClass12 smethod_181(object object_7)
	{
		return (GClass12)((GClass23)object_7).object_4;
	}

	public static void smethod_182(object object_7, object object_8)
	{
		((GClass23)object_7).object_4 = object_8;
	}

	public static GClass10 smethod_183(object object_7)
	{
		return (GClass10)((GClass23)object_7).object_5;
	}

	public static void smethod_184(object object_7, object object_8)
	{
		((GClass23)object_7).object_5 = object_8;
	}

	public static GClass18 smethod_185(object object_7)
	{
		return (GClass18)((GClass23)object_7).object_6;
	}

	public static void smethod_186(object object_7, object object_8)
	{
		((GClass23)object_7).object_6 = object_8;
	}

	public unsafe static GClass23 smethod_187()
	{
		if (GClass23.gclass23_0 != null)
		{
			return GClass23.gclass23_0;
		}
		object obj = GClass23.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass23.gclass23_0 == null)
			{
				GClass23.gclass23_0 = new GClass23();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass23.gclass23_0;
	}

	public static void smethod_188(GClass23 object_7)
	{
		smethod_176(object_7, smethod_166(object_7.object_1));
		smethod_155(smethod_177(object_7));
		MoveDataFromALU(smethod_179(object_7));
		smethod_80(smethod_181(object_7));
		smethod_68(smethod_183(object_7));
		ImportRegisterValues(smethod_185(object_7));
	}

	public static string ToBinary(int value, int bitcount)
	{
		return (bitcount > 1
			       ? ToBinary(value >> 1, bitcount - 1)
			       : null)
		       + "01"[value & 1];
	}

	public unsafe static VMCpuWrapper GetOrCreateClass25()
	{
		if (VMCpuWrapper.Instance != null)
		{
			return VMCpuWrapper.Instance;
		}
		object obj = VMCpuWrapper.LockObject;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMCpuWrapper.Instance == null)
			{
				VMCpuWrapper.Instance = new VMCpuWrapper();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMCpuWrapper.Instance;
	}

public static bool MainVMLoop(VMCpuWrapper vm)
{
	vm.cpu = GetOrCreateVMCpu();
	while (true)
	{
		Console.WriteLine(vm.cpu.CurrentAutomatonState.GetType().FullName);
		FetchAndExecuteNext(vm.cpu);
	}
}

	public static void smethod_192(object object_7, int int_9)
	{
		((VMCpuWrapper)object_7).cpu = GetOrCreateVMCpu();
		SetMustSuspend(((VMCpuWrapper)object_7).cpu, int_9);
	}

	public static void smethod_193(object object_7)
	{
		((VMCpuWrapper)object_7).cpu = GetOrCreateVMCpu();
		SetMustReset(((VMCpuWrapper)object_7).cpu, 1);
	}

	public static string GetProgramCounter(VMCpu object_7)
	{
		return object_7.ProgramCounter;
	}

	public static void SetProgramCounter(VMCpu object_7, object object_8)
	{
		object_7.ProgramCounter = (string)object_8;
	}

	public static string GetCurrentInstruction(VMCpu object_7)
	{
		return ((VMCpu)object_7).CurrentInstruction;
	}

	public static void SetCurrentInstruction(VMCpu object_7, string object_8)
	{
		((VMCpu)object_7).CurrentInstruction = (string)object_8;
	}

	public static int GetInt0(object object_7)
	{
		return ((VMCpu)object_7).int_0;
	}

	public static void SetInt0(object object_7, int int_9)
	{
		((VMCpu)object_7).int_0 = int_9;
	}

	public static int GetInt1(object object_7)
	{
		return ((VMCpu)object_7).int_1;
	}

	public static void SetInt1(object object_7, int int_9)
	{
		((VMCpu)object_7).int_1 = int_9;
	}

	public static bool GetMust1234567(object object_7)
	{
		return ((VMCpu)object_7).Must1234567;
	}

	public static void SetMust1234567(object object_7, int int_9)
	{
		((VMCpu)object_7).Must1234567 = (byte)int_9 != 0;
	}

	public static bool GetMustReset(object object_7)
	{
		return ((VMCpu)object_7).MustReset;
	}

	public static void SetMustReset(object object_7, int int_9)
	{
		((VMCpu)object_7).MustReset = (byte)int_9 != 0;
	}

	public static bool GetBool2(object object_7)
	{
		return ((VMCpu)object_7).bool_2;
	}

	public static void SetBool2(object object_7, int int_9)
	{
		((VMCpu)object_7).bool_2 = (byte)int_9 != 0;
	}

	public static bool GetMustMath(object object_7)
	{
		return ((VMCpu)object_7).MustMath;
	}

	public static void SetBool3(object object_7, int int_9)
	{
		((VMCpu)object_7).MustMath = (byte)int_9 != 0;
	}

	public static bool GetMustSuspend(object object_7)
	{
		return ((VMCpu)object_7).MustSuspend;
	}

	public static void SetMustSuspend(object object_7, int int_9)
	{
		((VMCpu)object_7).MustSuspend = (byte)int_9 != 0;
	}

	public unsafe static VMCpu GetOrCreateVMCpu()
	{
		if (VMCpu.gclass26_0 != null)
		{
			return VMCpu.gclass26_0;
		}
		object obj = VMCpu.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (VMCpu.gclass26_0 == null)
			{
				VMCpu.gclass26_0 = new VMCpu();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return VMCpu.gclass26_0;
	}

	public static void SetAutomatonState(VMCpu object_7, AutomatonState object_8)
	{
		object_7.CurrentAutomatonState = object_8;
	}

	public static void FetchAndExecuteNext(VMCpu vm)
	{
		vm.CurrentAutomatonState.Execute();
	}

	public static void DoNothing3()
	{
	}

	public static void DoNothing2(object object_7)
	{
	}

	public static void ComputeNextProgramCounter(FetchAutomatonState automatonState)
	{
		// Read next PC from last instruction.
		string operand = GetCurrentInstruction(automatonState.VMCpu).Substring(1, 8);
		string reg3 = GetRegister3Value(automatonState.VMState).Substring(24, 8);

		// If flag 9 is set, add reg3 to the operand.
		string nextPC;
		if (GetCurrentInstruction(automatonState.VMCpu)[9] != '1')
		{
			nextPC = operand;
			char c = default(char);
			GClass3.Unused = c;
		}
		else
		{
			nextPC = ToBinary(Convert.ToInt32(operand, 2) | Convert.ToInt32(reg3, 2), 8);
		}

		// Interpret flags.
		int[] flags = GetFlags(automatonState.VMState);
		int parity = flags[0];
		int zero = flags[1];
		int paritySelect = Convert.ToInt32(GetCurrentInstruction((automatonState).VMCpu)[10].ToString(), 2);
		int zeroSelect = Convert.ToInt32(GetCurrentInstruction((automatonState).VMCpu)[11].ToString(), 2);
		int num5 = (parity & paritySelect) | (zero & zeroSelect);

		UnusedInt3 = zero;

		// Skip if parity or zero is set and selected in the instruction.
		int num6 = num5;
		num6 |= Convert.ToInt32(GetProgramCounter(automatonState.VMCpu)[0].ToString(), 2);

		VMCpu cpu = automatonState.VMCpu;
		string text = num6.ToString();

		UnusedInt4 = 796469985;

		// Set next program counter.
		SetProgramCounter(cpu, text + nextPC);
	}

	public static void Verify()
	{
		EndAutomatonState.VMState = GetOrCreateClass13();

		string key = GetValue(EndAutomatonState.VMState.InternalState1.Registers[7])
		             + GetValue(EndAutomatonState.VMState.InternalState1.Registers[2])
		             + GetValue(EndAutomatonState.VMState.InternalState1.Registers[4]);

		string encryptedData = "XJeEaI72hAOSJgApwmVkaLerdwyKhADpmLuhuxonxfQ2j9zSfj/osQ==";
		try
		{
			Console.WriteLine(DecryptTripleDES(encryptedData, key, shouldHashKey: true));
		}
		catch (Exception)
		{
			Console.WriteLine("Not cracked");
		}

		Console.ReadLine();
		Environment.Exit(0);
	}

	public static string EncryptTripleDES(object object_7, object object_8, int int_9)
	{
		object bytes = Encoding.UTF8.GetBytes((string)object_7);
		new AppSettingsReader();
		object key;
		if (int_9 != 0)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			key = mD5CryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes((string)object_8));
			mD5CryptoServiceProvider.Clear();
		}
		else
		{
			key = Encoding.UTF8.GetBytes((string)object_8);
		}
		TripleDESCryptoServiceProvider obj = new TripleDESCryptoServiceProvider
		{
			Key = (byte[])key,
			Mode = CipherMode.ECB,
			Padding = PaddingMode.PKCS7
		};
		object obj2 = obj.CreateEncryptor().TransformFinalBlock((byte[])bytes, 0, ((Array)bytes).Length);
		obj.Clear();
		return Convert.ToBase64String((byte[])obj2, 0, ((Array)obj2).Length);
	}

	public static string DecryptTripleDES(string encrypted_data, string key, bool shouldHashKey)
	{
		object obj = Convert.FromBase64String(encrypted_data);
		new AppSettingsReader();
		object key2;
		if (shouldHashKey)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			key2 = mD5CryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(key));
			mD5CryptoServiceProvider.Clear();
		}
		else
		{
			key2 = Encoding.UTF8.GetBytes(key);
		}
		TripleDESCryptoServiceProvider obj2 = new TripleDESCryptoServiceProvider
		{
			Key = (byte[])key2,
			Mode = CipherMode.ECB,
			Padding = PaddingMode.PKCS7
		};
		object bytes = obj2.CreateDecryptor().TransformFinalBlock((byte[])obj, 0, ((Array)obj).Length);
		obj2.Clear();
		return Encoding.UTF8.GetString((byte[])bytes);
	}

	public static void DoNothing()
	{
	}

	public static string smethod_222(object object_7)
	{
		return ((GClass32)object_7).string_0;
	}

	public static void smethod_223(object object_7, object object_8)
	{
		((GClass32)object_7).string_0 = (string)object_8;
	}

	public static string smethod_224(object object_7)
	{
		return ((GClass32)object_7).string_1;
	}

	public static void smethod_225(object object_7, object object_8)
	{
		((GClass32)object_7).string_1 = (string)object_8;
	}

	public static string smethod_226(object object_7)
	{
		return ((GClass32)object_7).string_2;
	}

	public static void smethod_227(object object_7, object object_8)
	{
		((GClass32)object_7).string_2 = (string)object_8;
	}

	public static string smethod_228(object object_7)
	{
		return ((GClass32)object_7).string_3;
	}

	public static void smethod_229(object object_7, object object_8)
	{
		((GClass32)object_7).string_3 = (string)object_8;
	}

	public static bool smethod_230(object object_7)
	{
		return ((GClass32)object_7).bool_0;
	}

	public static void smethod_231(object object_7, int int_9)
	{
		((GClass32)object_7).bool_0 = (byte)int_9 != 0;
	}

	public static bool smethod_232(object object_7)
	{
		return ((GClass32)object_7).bool_1;
	}

	public static void smethod_233(object object_7, int int_9)
	{
		((GClass32)object_7).bool_1 = (byte)int_9 != 0;
	}

	public unsafe static GClass32 smethod_234()
	{
		if (GClass32.gclass32_0 != null)
		{
			return GClass32.gclass32_0;
		}
		object obj = GClass32.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass32.gclass32_0 == null)
			{
				GClass32.gclass32_0 = new GClass32();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass32.gclass32_0;
	}

	public static string smethod_235(object object_7)
	{
		return ((GClass33)object_7).string_0;
	}

	public static void smethod_236(object object_7, object object_8)
	{
		((GClass33)object_7).string_0 = (string)object_8;
	}

	public static string smethod_237(object object_7)
	{
		return ((GClass33)object_7).string_1;
	}

	public static void smethod_238(object object_7, object object_8)
	{
		((GClass33)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass33 smethod_239()
	{
		if (GClass33.gclass33_0 != null)
		{
			return GClass33.gclass33_0;
		}
		object obj = GClass33.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass33.gclass33_0 == null)
			{
				GClass33.gclass33_0 = new GClass33();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass33.gclass33_0;
	}

	public static string smethod_240(object object_7)
	{
		return ((GClass34)object_7).string_0;
	}

	public static void smethod_241(object object_7, object object_8)
	{
		((GClass34)object_7).string_0 = (string)object_8;
	}

	public static string smethod_242(object object_7)
	{
		return ((GClass34)object_7).string_1;
	}

	public static void smethod_243(object object_7, object object_8)
	{
		((GClass34)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass34 smethod_244()
	{
		if (GClass34.gclass34_0 != null)
		{
			return GClass34.gclass34_0;
		}
		object obj = GClass34.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass34.gclass34_0 == null)
			{
				GClass34.gclass34_0 = new GClass34();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass34.gclass34_0;
	}

	public static void WrapStartMainLoop(MainVMType object_7, int int_9)
	{
		ImportMemory2(object_7.State1, 0);
		StartMainVMLoop(object_7.State1);
	}

	public static void WrapImportMemory(MainVMType vm, int int_9)
	{
		ImportMemory(vm.State1, 0);
	}

	public static GClass42 smethod_247(object object_7)
	{
		return (GClass42)((MainVMType)object_7).State2;
	}

	public static bool smethod_248(object object_7)
	{
		bool num = smethod_156(smethod_6(((MainVMType)object_7).State1));
		if (num)
		{
			smethod_301(((MainVMType)object_7).State2, GetMemory(smethod_6(((MainVMType)object_7).State1)));
			smethod_302(((MainVMType)object_7).State2, GetMemory2(smethod_6(((MainVMType)object_7).State1)));
			smethod_303(((MainVMType)object_7).State2, smethod_162(smethod_6(((MainVMType)object_7).State1)));
			smethod_249(object_7);
		}
		return num;
	}

	public static void smethod_249(object object_7)
	{
		smethod_7(((MainVMType)object_7).State1);
	}

	public static void smethod_250(object object_7, int int_9)
	{
		smethod_8(((MainVMType)object_7).State1, int_9);
	}

	public static void smethod_251(object object_7)
	{
		smethod_9(((MainVMType)object_7).State1);
	}

	public static string[] smethod_252(object object_7)
	{
		return ((GClass38)object_7).string_0;
	}

	public static void smethod_253(object object_7, object object_8)
	{
		((GClass38)object_7).string_0 = (string[])object_8;
	}

	public unsafe static GClass38 smethod_254()
	{
		if (GClass38.gclass38_0 != null)
		{
			return GClass38.gclass38_0;
		}
		object obj = GClass38.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass38.gclass38_0 == null)
			{
				GClass38.gclass38_0 = new GClass38();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass38.gclass38_0;
	}

	public static string[] smethod_255(object object_7)
	{
		return ((GClass39)object_7).string_0;
	}

	public static void smethod_256(object object_7, object object_8)
	{
		((GClass39)object_7).string_0 = (string[])object_8;
	}

	public unsafe static GClass39 smethod_257()
	{
		if (GClass39.gclass39_0 != null)
		{
			return GClass39.gclass39_0;
		}
		object obj = GClass39.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass39.gclass39_0 == null)
			{
				GClass39.gclass39_0 = new GClass39();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass39.gclass39_0;
	}

	public static int smethod_258(object object_7)
	{
		return ((GClass36)object_7).int_0;
	}

	public static void smethod_259(object object_7, int int_9)
	{
		((GClass36)object_7).int_0 = int_9;
	}

	public static string smethod_260(object object_7)
	{
		return ((GClass36)object_7).string_0;
	}

	public static void smethod_261(object object_7, object object_8)
	{
		((GClass36)object_7).string_0 = (string)object_8;
	}

	public static int smethod_262(object object_7)
	{
		return ((GClass37)object_7).int_0;
	}

	public static void smethod_263(object object_7, int int_9)
	{
		((GClass37)object_7).int_0 = int_9;
	}

	public static string smethod_264(object object_7)
	{
		return ((GClass37)object_7).string_0;
	}

	public static void smethod_265(object object_7, object object_8)
	{
		((GClass37)object_7).string_0 = (string)object_8;
	}

	public static string smethod_266(object object_7)
	{
		return ((GClass40)object_7).string_0;
	}

	public static void smethod_267(object object_7, object object_8)
	{
		((GClass40)object_7).string_0 = (string)object_8;
	}

	public static string smethod_268(object object_7)
	{
		return ((GClass40)object_7).string_1;
	}

	public static void smethod_269(object object_7, object object_8)
	{
		((GClass40)object_7).string_1 = (string)object_8;
	}

	public static string smethod_270(object object_7)
	{
		return ((GClass40)object_7).string_2;
	}

	public static void smethod_271(object object_7, object object_8)
	{
		((GClass40)object_7).string_2 = (string)object_8;
	}

	public static string smethod_272(object object_7)
	{
		return ((GClass40)object_7).string_3;
	}

	public static void smethod_273(object object_7, object object_8)
	{
		((GClass40)object_7).string_3 = (string)object_8;
	}

	public static string smethod_274(object object_7)
	{
		return ((GClass40)object_7).string_4;
	}

	public static void smethod_275(object object_7, object object_8)
	{
		((GClass40)object_7).string_4 = (string)object_8;
	}

	public static string smethod_276(object object_7)
	{
		return ((GClass40)object_7).string_5;
	}

	public static void smethod_277(object object_7, object object_8)
	{
		((GClass40)object_7).string_5 = (string)object_8;
	}

	public static string smethod_278(object object_7)
	{
		return ((GClass40)object_7).string_6;
	}

	public static void smethod_279(object object_7, object object_8)
	{
		((GClass40)object_7).string_6 = (string)object_8;
	}

	public static string smethod_280(object object_7)
	{
		return ((GClass40)object_7).string_7;
	}

	public static void smethod_281(object object_7, object object_8)
	{
		((GClass40)object_7).string_7 = (string)object_8;
	}

	public static string smethod_282(object object_7)
	{
		return ((GClass40)object_7).string_8;
	}

	public static void smethod_283(object object_7, object object_8)
	{
		((GClass40)object_7).string_8 = (string)object_8;
	}

	public static string smethod_284(object object_7)
	{
		return ((GClass40)object_7).string_9;
	}

	public static void smethod_285(object object_7, object object_8)
	{
		((GClass40)object_7).string_9 = (string)object_8;
	}

	public unsafe static GClass40 smethod_286()
	{
		if (GClass40.gclass40_0 != null)
		{
			return GClass40.gclass40_0;
		}
		object obj = GClass40.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass40.gclass40_0 == null)
			{
				GClass40.gclass40_0 = new GClass40();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass40.gclass40_0;
	}

	public static string smethod_287(object object_7)
	{
		return ((GClass41)object_7).string_0;
	}

	public static void smethod_288(object object_7, object object_8)
	{
		((GClass41)object_7).string_0 = (string)object_8;
	}

	public static string smethod_289(object object_7)
	{
		return ((GClass41)object_7).string_1;
	}

	public static void smethod_290(object object_7, object object_8)
	{
		((GClass41)object_7).string_1 = (string)object_8;
	}

	public unsafe static GClass41 smethod_291()
	{
		if (GClass41.gclass41_0 != null)
		{
			return GClass41.gclass41_0;
		}
		object obj = GClass41.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass41.gclass41_0 == null)
			{
				GClass41.gclass41_0 = new GClass41();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass41.gclass41_0;
	}

	public static bool smethod_292(object object_7)
	{
		return ((GClass42)object_7).bool_0;
	}

	public static void smethod_293(object object_7, int int_9)
	{
		((GClass42)object_7).bool_0 = (byte)int_9 != 0;
	}

	public static GClass43 smethod_294(object object_7)
	{
		return (GClass43)((GClass42)object_7).object_1;
	}

	public static void smethod_295(object object_7, object object_8)
	{
		((GClass42)object_7).object_1 = object_8;
	}

	public static GClass39 smethod_296(object object_7)
	{
		return (GClass39)((GClass42)object_7).object_2;
	}

	public static void smethod_297(object object_7, object object_8)
	{
		((GClass42)object_7).object_2 = object_8;
	}

	public static GClass38 smethod_298(object object_7)
	{
		return (GClass38)((GClass42)object_7).object_3;
	}

	public static void smethod_299(object object_7, object object_8)
	{
		((GClass42)object_7).object_3 = object_8;
	}

	public unsafe static GClass42 GetOrCrateGClass42()
	{
		if (GClass42.gclass42_0 != null)
		{
			return GClass42.gclass42_0;
		}
		object obj = GClass42.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass42.gclass42_0 == null)
			{
				GClass42.gclass42_0 = new GClass42();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass42.gclass42_0;
	}

	public static void smethod_301(object object_7, object object_8)
	{
		smethod_256(smethod_296(object_7), smethod_108(object_8));
	}

	public static void smethod_302(object object_7, object object_8)
	{
		smethod_253(smethod_298(object_7), smethod_99(object_8));
	}

	public static void smethod_303(object object_7, object object_8)
	{
		smethod_305(smethod_294(object_7), smethod_175(object_8));
		smethod_223(smethod_308(smethod_294(object_7)), GetAluOperation(smethod_179(object_8)));
		smethod_231(smethod_308(smethod_294(object_7)), GetParityFlag(smethod_179(object_8)) ? 1 : 0);
		smethod_233(smethod_308(smethod_294(object_7)), GetZeroFlag(smethod_179(object_8)) ? 1 : 0);
		smethod_225(smethod_308(smethod_294(object_7)), GetAluArg1(smethod_179(object_8)));
		GClass32 object_9 = smethod_308(smethod_294(object_7));
		UnusedInt4 = -759738571;
		smethod_227(object_9, GetAluArg2(smethod_179(object_8)));
		smethod_229(smethod_308(smethod_294(object_7)), GetAluResult(smethod_179(object_8)));
		smethod_236(smethod_312(smethod_294(object_7)), smethod_63(smethod_183(object_8)));
		GClass33 object_10 = smethod_312(smethod_294(object_7));
		string object_11 = smethod_65(smethod_183(object_8));
		GClass36.object_0 = null;
		smethod_238(object_10, object_11);
		smethod_241(smethod_310(smethod_294(object_7)), smethod_75(smethod_181(object_8)));
		int_2 = -1652138191;
		smethod_243(smethod_310(smethod_294(object_7)), smethod_77(smethod_181(object_8)));
		smethod_279(smethod_314(smethod_294(object_7)), GetRegister6Value(smethod_185(object_8)));
		smethod_285(smethod_314(smethod_294(object_7)), GetRegister9Value(smethod_185(object_8)));
		int_0 = 2134890358;
		smethod_277(smethod_314(smethod_294(object_7)), GetRegister5Value(smethod_185(object_8)));
		smethod_267(smethod_314(smethod_294(object_7)), GetRegister0Value(smethod_185(object_8)));
		smethod_273(smethod_314(smethod_294(object_7)), GetRegister3Value(smethod_185(object_8)));
		smethod_269(smethod_314(smethod_294(object_7)), GetRegister1Value(smethod_185(object_8)));
		object_2 = "09d7da03-5525-4995-b21a-a55d4f11fa95aa1d4d4e-22fe-44c6-b216-b585a2658dc5d2376275-f20";
		smethod_283(smethod_314(smethod_294(object_7)), GetRegister8Value(smethod_185(object_8)));
		GClass40 object_12 = smethod_314(smethod_294(object_7));
		GClass18 object_13 = smethod_185(object_8);
		UnusedInt3 = 1549806971;
		smethod_271(object_12, GetRegister2Value(object_13));
		smethod_275(smethod_314(smethod_294(object_7)), GetRegister4Value(smethod_185(object_8)));
		smethod_281(smethod_314(smethod_294(object_7)), GetRegister7Value(smethod_185(object_8)));
		smethod_290(smethod_306(smethod_294(object_7)), smethod_152(smethod_177(object_8)));
		smethod_288(smethod_306(smethod_294(object_7)), smethod_150(smethod_177(object_8)));
	}

	public static string smethod_304(object object_7)
	{
		return ((GClass43)object_7).string_0;
	}

	public static void smethod_305(object object_7, object object_8)
	{
		((GClass43)object_7).string_0 = (string)object_8;
	}

	public static GClass41 smethod_306(object object_7)
	{
		return (GClass41)((GClass43)object_7).object_1;
	}

	public static void smethod_307(object object_7, object object_8)
	{
		((GClass43)object_7).object_1 = object_8;
	}

	public static GClass32 smethod_308(object object_7)
	{
		return (GClass32)((GClass43)object_7).object_2;
	}

	public static void smethod_309(object object_7, object object_8)
	{
		((GClass43)object_7).object_2 = object_8;
	}

	public static GClass34 smethod_310(object object_7)
	{
		return (GClass34)((GClass43)object_7).object_3;
	}

	public static void smethod_311(object object_7, object object_8)
	{
		((GClass43)object_7).object_3 = object_8;
	}

	public static GClass33 smethod_312(object object_7)
	{
		return (GClass33)((GClass43)object_7).object_4;
	}

	public static void smethod_313(object object_7, object object_8)
	{
		((GClass43)object_7).object_4 = object_8;
	}

	public static GClass40 smethod_314(object object_7)
	{
		return (GClass40)((GClass43)object_7).object_5;
	}

	public static void smethod_315(object object_7, object object_8)
	{
		((GClass43)object_7).object_5 = object_8;
	}

	public unsafe static GClass43 smethod_316()
	{
		if (GClass43.gclass43_0 != null)
		{
			return GClass43.gclass43_0;
		}
		object obj = GClass43.object_0;
		int lockTaken = 0;
		try
		{
			Monitor.Enter(obj, ref *(bool*)(&lockTaken));
			if (GClass43.gclass43_0 == null)
			{
				GClass43.gclass43_0 = new GClass43();
			}
		}
		finally
		{
			if (lockTaken != 0)
			{
				Monitor.Exit(obj);
			}
		}
		return GClass43.gclass43_0;
	}

	public static ResourceManager smethod_317(string string_0, Assembly assembly_0)
	{
		string fullName = assembly_0.FullName;
		string baseName = ((fullName == null || !(fullName == "ErjeyInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")) ? GClass44.smethod_0(string_0) : GClass44.smethod_0(string_0));
		return new ResourceManager(baseName, assembly_0);
	}

	internal static int smethod_318(string string_0)
	{
		int num = -1;
		byte[] bytes = Encoding.UTF8.GetBytes(string_0);
		byte[] array = bytes;
		foreach (byte b in array)
		{
			num ^= b << 24;
			for (int j = 0; j < 8; j++)
			{
				num = (((num & 0x80000000L) != 2147483648L) ? (num << 1) : ((num << 1) ^ 0x4C11DB7));
			}
		}
		return num;
	}
}
