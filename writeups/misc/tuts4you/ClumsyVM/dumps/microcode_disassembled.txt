00000000: 0 & 0;
          goto 00000006;

00000001: 0 & 0;
          goto 000000BC;

// -------------------------------------------------------------------------------
// Read next opcode and jump to dir4atcher
//

00000006: r2 := 0 + r2 + 1;
          r3 := byte[r2];
          goto r3;

// -------------------------------------------------------------------------------
//
//

00000007: r2 := 0 + r2 + 1;
00000008: r2 := 0 + r2 + 1;
          r3 := byte[r2];
00000009: 0 & 0;
          goto 00000006;

// -------------------------------------------------------------------------------
// push imm8
//

00000010: r0, r4 := 0 + r4 + 1;
00000011: r2 := 0 + r2 + 1;
          r3 := byte[r2];
00000012: r1, r7 := 0 | r3s;
          dword[r0] := r1;
          goto 00000006;

// -------------------------------------------------------------------------------
//
//

00000015: r9 := 0 | r5;                     ; r1 = dword [r5 + r3]
00000016: r0 := r9 + r3u;
          r1 := dword[r0];

00000017: r0, r4 := 0 + r4 + 1;             ; push(r1)
00000018: r2 := 0 + r2 + 1;
          dword[r0] := r1;
          r3 := byte[r2];
00000019: r7 := 0 | r1;                     ; r7 = r1
          goto 00000006;

00000020: r2 := 0 + r2 + 1;
          r3 := byte[r2];
00000021: r9 := (0 | r3u) << 8;
00000022: r9 := r9 | r3u;
00000023: r0 := r9 + r6;
          r1 := dword[r0];
          goto 00000017;

// -------------------------------------------------------------------------------
// Puts r7 into [r5 + operand]
// Pops stack and sets r7 to this value

00000036: r9 := 0 | r5;                         ; dword [r5 + r3] = r7
00000037: r0 := r9 + r3u;
00000038: r1 := 0 | r7;
          dword[r0] := r1;

00000039: r0, r4 := !0 + r4;                    ; r7 = pop()
          r1 := dword[r0];
0000003A: r2 := 0 + r2 + 1;                     ;
          r3 := byte[r2];
0000003B: r7 := 0 | r1;                         ;
          goto 00000006;

// -------------------------------------------------------------------------------
// push r7
//

00000057: r0, r4 := 0 + r4 + 1;                 // r0, r4 = r4 + 1
00000058: r1 := 0 | r7;                         // write_dword(r0, r7)
          dword[r0] := r1;
          goto 00000006;                        // (r2++)

// -------------------------------------------------------------------------------
// pop r7
//

00000059: r0, r4 := !0 + r4;                    // r0, r4 = r4 - 1
          r1 := dword[r0];                      // r1 = read_dword(r0)
0000005A: 0 & 0;
0000005B: r7 := 0 | r1;                         // r7 = r1
          goto 00000006;

// -------------------------------------------------------------------------------
// sub r7

0000005C: r0, r4 := !0 + r4;                    // r1 = pop()
          r1 := dword[r0];

0000005D: r9 := 0 | r7;                         // push?(r1 - r7)
0000005E: r1, r7 := !r9 + r1 + 1;
          dword[r0] := r1;
          goto 00000006;


// -------------------------------------------------------------------------------
// xchg [r4], r7
//

0000005F: r0 := !0 + r4;                        // r1 = top
          r1 := dword[r0];

00000060: r0 := 0 | r4;                         // r9 = r1
00000061: r9 := 0 | r1;
          dword[r0] := r1;

00000062: r1 := 0 | r7;                         // top = r7
00000063: r0 := !0 + r4;
          dword[r0] := r1;

00000064: r7 := r9 | 0;                         // r7 = r9
          goto 00000006;


// -------------------------------------------------------------------------------
// add r7 to top of stack.

00000065: r0, r4 := !0 + r4;                    // r1 = pop()
          r1 := dword[r0];
00000066: r9 := 0 | r7;
00000067: r1, r7 := r9 + r1;
          dword[r0] := r1;
          goto 00000006;

// -------------------------------------------------------------------------------
// and top of stack with r7
//

0000007E: r0, r4 := !0 + r4;
          r1 := dword[r0];
0000007F: r9 := 0 | r7;
00000080: r1, r7 := r9 & r1;
          dword[r0] := r1;
          goto 00000006;

// -------------------------------------------------------------------------------
// add [r5 + op1], op2 ???
//

00000084: r9 := 0 | r5;                     ; r1 = dword [r5 + r3]
00000085: r0 := r9 + r3u;
          r1 := dword[r0];

00000086: r2 := 0 + r2 + 1;                 ;
          r3 := byte[r2];
00000087: r9 := 0 | r1;                     ; r9 = r1
00000088: r2 := 0 + r2 + 1;
          r3 := byte[r2];
00000089: r1 := r9 + r3s;                   ; r1 = r9 + operand 1
          dword[r0] := r1;
          goto 00000006;

// -------------------------------------------------------------------------------
// or top of stack with r7, save in r7

00000099: r0, r4 := !0 + r4;
          r1 := dword[r0];
0000009A: r8 := 0 | r7;
0000009B: r7 := 0 | r1;
0000009C: 0 | r8;
          goto 00000007;

// -------------------------------------------------------------------------------
// or top of stack with r7, save in r7
//
// exact copy of sub_99

0000009D: r0, r4 := !0 + r4;
          r1 := dword[r0];
0000009E: r8 := 0 | r7;
0000009F: r7 := 0 | r1;
000000A0: 0 | r8;
          goto 00000007;

// -------------------------------------------------------------------------------
// pop 2 and cmp
//

000000A1: r0, r4 := !0 + r4;
          r1 := dword[r0];
000000A2: r0, r4 := !0 + r4;
000000A3: r9 := 0 | r1;
          r1 := dword[r0];
000000A4: r8 := 0 | r7;
000000A5: r7 := 0 | r1;
000000A6: !r9 + r8 + 1;
          goto 00000007;

// -------------------------------------------------------------------------------
// halt

000000A7: r8 := !0 + r2;
000000A8: r2 := 0 + r2 + 1;
          r3 := byte[r2];               // VM is hardcoded to exist here.

// -------------------------------------------------------------------------------
// Not used.

000000A9: r9 := (0 | r3s) << 8;
000000AA: r9 := r9 | r3u;
000000AB: r2 := r9 + r8;
          r3 := byte[r2];
000000AC: 0 & 0;
          goto 00000006;

// -------------------------------------------------------------------------------
// ret

000000AD: r0, r4 := 0 | r5;
          r1 := dword[r0];
000000AE: 0 & 0;
000000AF: r0, r5 := 0 | r1;
          r1 := dword[r0];
000000B0: r0 := 0 + r5 + 1;
000000B1: r2 := 0 | r1;
          r1 := dword[r0];
          r3 := byte[r2];
000000B2: r0 := 0 | r4;
000000B3: r5 := 0 | r1;
000000B4: r1 := 0 | r7;
          dword[r0] := r1;
000000B5: !0 + r2;
          goto 00000006;

//-----------------------------------------------------------------------------------
// or r7

000000B6: r0, r4 := !0 + r4;
          r1 := dword[r0];
000000B7: r9 := 0 | r7;
000000B8: r1, r7 := r9 | r1;
          dword[r0] := r1;
          goto 00000006;

//-----------------------------------------------------------------------------------
// call r6 + operand


000000B9: r2 := 0 + r2 + 1;
          r3 := byte[r2];
000000BA: r9 := (0 | r3u) << 8;
000000BB: r9 := r9 | r3u;


//-----------------------------------------------------------------------------------
// Function prologue:
//  reads two 16 words A, B starting at r2
//
//
000000BC: r0 := r9 + r6;                            // <-- entrypoint
          r1 := dword[r0];

000000BD: r8 := 0 + r2 + 1;

000000BE: r2 := 0 | r1;                             // r2 = r1;                             ; A = readword()
          r3 := byte[r2];                           // r9 = read_word(r2);
000000BF: r2 := 0 + r2 + 1;                         // r2 += 2;
          r3 := byte[r2];
000000C0: r9 := (0 | r3u) << 8;
000000C1: r9 := r9 | r3u;
000000C2: r2 := 0 + r2 + 1;

          r3 := byte[r2];
000000C3: r7 := !r9 + r4 + 1;                       // r7 = r4 - r9                         ;
000000C4: r0, r7 := 0 + r7 + 1;                     // r0, r7 = r7 + 1;

000000C5: r2 := 0 + r2 + 1;                         // r9 = read_word(r2);                  ; B = readword()
          r3 := byte[r2];                           // r2 += 2;
000000C6: r9 := (0 | r3u) << 8;
000000C7: r9 := r9 | r3u;

000000C8: r1 := r9 + r4 + 1;                        // write_dword(r0, r9+r4+1)
          dword[r0] := r1;
000000C9: r0, r4 := 0 | r1;                         // r0, r4 = r9+r4+1;

000000CA: r1 := 0 | r8;                             // write_dword(r0, r8)
          dword[r0] := r1;

000000CB: r0, r4 := 0 + r4 + 1;                     // r0, r4 = r4 + 1;
000000CC: r1 := 0 | r5;                             // write_dword(r0, r5)
          dword[r0] := r1;

000000CD: r2 := 0 + r2 + 1;                         // r2++
          r3 := byte[r2];                           // r3 = read_byte(r2)
000000CE: r5 := 0 | r7;                             // r5 = r7
          goto 00000006;

000000CF: r2 := 0 + r2 + 1;
          r3 := byte[r2];
          goto r3;


// ---------------------------------------------------------------------------------
// Not used?


00000106: 0 & 0;
          goto 00000006;

00000107: r8 := !0 + r2;
          r3 := byte[r2];
          goto 000000A8;

00000115: r2 := 0 + r2 + 1;
          r3 := byte[r2];
          goto 00000016;

00000116: r9 := (0 | r3u) << 8;
          goto 00000017;

00000117: r9 := r9 | r3u;
          goto 00000018;

00000118: r0 := r9 + r5;
          r1 := dword[r0];
          goto 00000017;

00000136: r2 := 0 + r2 + 1;
          r3 := byte[r2];
          goto 00000037;

00000137: r9 := (0 | r3u) << 8;
          goto 00000038;

00000138: r9 := r9 | r3u;
          goto 00000039;

00000139: r0 := r9 + r5;
          goto 00000038;
